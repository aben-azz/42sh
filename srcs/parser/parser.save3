/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: midrissi <midrissi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/05/04 23:37:49 by midrissi          #+#    #+#             */
/*   Updated: 2019/05/07 14:39:08 by ghamelek         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "shell.h"

t_ast *newnode(t_token *item) 
{ 
	t_ast *temp =  (t_ast *)malloc(sizeof(t_ast)); 
	if (item)
	{
		temp->token = item;
	}
	else
		temp->token = NULL;
	temp->left = temp->right = NULL; 
	return temp;
}
static e_op_type	is_in_lexer(t_list *lexer, int SEM)
{
	t_token *token;
	t_list *head;
	
	head = lexer;
	if(SEM)
	while (lexer)
	{
		token = (t_token *)(lexer->content);
		if (SEM && token->op_type == SEMI)
			return (SEMI);
		lexer = lexer->next;
	}
	lexer = head;
	while (lexer)
	{
		token = (t_token *)(lexer->content);
		if (token->op_type == DBL_AND)
			return (DBL_AND);
		lexer = lexer->next;
	}
	lexer = head;
	while (lexer)
	{
		token = (t_token *)(lexer->content);
		if (token->op_type == DBL_PIPE)
			return (DBL_PIPE);
		lexer = lexer->next;
	}
	lexer = head;
	while (lexer)
	{
		token = (t_token *)(lexer->content);
		if (token->op_type == PIPE)
			return (PIPE);
		lexer = lexer->next;
	}
	return (OTHER_OP);
}


void	build_tree_op(t_list *lexer, t_ast **root , e_op_type optype)
{
	t_list *save2;
	t_list *save1;
	t_list *origin;
	t_token *token;
	t_list *prev;

	save2 = NULL;
	save1 = NULL;
	origin= lexer;

	if (!lexer) return ;
	if(optype == OTHER_OP)
			optype = is_in_lexer(lexer, 1);
	prev = lexer;
	while(lexer)
	{
		token = (t_token*)(lexer->content);
		if (token->op_type == optype)
		{
			save1 = prev;
			save2 = lexer->next;
		}
		prev = lexer;
		lexer = lexer->next;
	}
	prev = save1;
	if (save1)
		save1 = save1->next;
	if (prev)
		prev->next = NULL;
	if (!is_in_lexer(origin, optype) && !save1)
	{
		if (is_in_lexer(origin, DBL_AND))
			build_tree_op(origin, root, DBL_AND);
		else if (is_in_lexer(origin, DBL_PIPE))
			build_tree_op(origin, root, DBL_PIPE);
		else if (is_in_lexer(origin, PIPE))
			build_tree_op(origin, root, PIPE);
		else
			*root = newnode((t_token *)(origin->content));
	}
	if (save1)
	{
		*root = newnode((t_token *)(save1->content));
		if (save2)
		{
			if (is_in_lexer(save2, DBL_AND))
				build_tree_op(save2, &((*root)->right), DBL_AND);
			else if (is_in_lexer(save2, DBL_PIPE))
				build_tree_op(save2, &((*root)->right), DBL_PIPE);
			else if (is_in_lexer(save2, PIPE))
				build_tree_op(save2, &((*root)->right), PIPE);
			else
				(*root)->right = newnode((t_token *)(save2->content));
		}
		build_tree_op(origin, &((*root)->left) , optype);
	}
}

static void inorder(t_ast *root,char *str) 
{ 
	if (root != NULL) 
	{ 
		inorder(root->left,ft_strjoin(str , " ---> left"));
		if (root->token)
			printf(" %6s   ===>   %6s \n", root->token->content,str);
		inorder(root->right,ft_strjoin(str ," ---> right"));
	}
}

static char		*check_syntax_errors(t_list *tokens)
{
	t_token *curr;
	t_token *next;

	if (tokens && ((t_token *)(tokens->content))->type == TOKEN_CTL_OPERATOR)
		return (((t_token *)(tokens->content))->content);
	while (tokens && tokens->next)
	{
		curr = (t_token *)(tokens->content);
		next = (t_token *)(tokens->next->content);
		if (curr->type == TOKEN_REDIR && next->type != TOKEN_WORD)
			return (next->content);
		if (curr->type == TOKEN_CTL_OPERATOR && next->type == TOKEN_CTL_OPERATOR)
			return (next->content);
		tokens = tokens->next;
	}
	return (NULL);
}


void  ft_parse(t_list *lexer)
{
	char *error;
	t_ast *root;

	root = NULL;
	error = check_syntax_errors(lexer);
	if (error)
	{
		ft_putstr_fd(ANSI_RED"21sh: parse error near'", 2);
		ft_putstr_fd(error, 2);
		ft_putendl_fd("'", 2);
	}
	build_tree_op(lexer, &root, OTHER_OP);
	inorder(root," root");
}
